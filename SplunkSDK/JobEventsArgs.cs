/*
 * Copyright 2012 Splunk, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"): you may
 * not use this file except in compliance with the License. You may obtain
 * a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

namespace Splunk
{
    /// <summary>
    ///     Contains arguments for getting job results
    ///     using the <seealso cref="Job" /> class.
    /// </summary>
    public class JobEventsArgs : Args
    {
        /// <summary>
        ///     Specifies the format for the returned output.
        /// </summary>
        // C# disallow nested class to have the same name as
        // a property. Use 'Enum' suffix to differentiate.
        public enum OutputModeEnum
        {
            /// <summary>
            ///     Returns output in Atom format.
            /// </summary>
            [CustomString("atom")]
            Atom,

            /// <summary>
            ///     Returns output in CSV format.
            /// </summary>
            [CustomString("csv")]
            Csv,

            /// <summary>
            ///     Returns output in JSON format.
            /// </summary>
            [CustomString("json")]
            Json,

            /// <summary>
            ///     Returns output in JSON_COLS format.
            /// </summary>
            [CustomString("json_cols")]
            JsonColumns,

            /// <summary>
            ///     Returns output in JSON_ROWS format.
            /// </summary>
            [CustomString("json_rows")]
            JsonRows,

            /// <summary>
            ///     Returns output in raw format.
            /// </summary>
            [CustomString("raw")]
            Raw,

            /// <summary>
            ///     Returns output in XML format.
            /// </summary>
            [CustomString("xml")]
            Xml,
        }

        /// <summary>
        /// Specifies how to truncate lines to achieve the value in 
        /// <see cref="MaximumLines"/>
        /// </summary>
        // C# disallow nested class to have the same name as
        // a property. Use 'Enum' suffix to differentiate.
        public enum TruncationModeEnum
        {
            [CustomString("abstract")]
            Abstract,

            [CustomString("truncate")]
            Truncate,
        }

        /* BEGIN AUTOGENERATED CODE */

        /// <summary>
        /// Sets the maximum number of results to return. To return all available results, specify 0. The default value is 100.
        /// </summary>
        public new int Count
        {
            set { this["count"] = value; }
        }

        /// <summary>
        /// Specifies the earliest time in the time range to search. The time string can be a UTC time (with fractional seconds), a relative time specifier (to now), or a formatted time string.
        /// </summary>
        public string EarliestTime
        {
            set { this["earliest_time"] = value; }
        }

        /// <summary>
        /// Sets a list of fields to return for the event set.
        /// </summary>
        public string[] FieldList
        {
            set { this["f"] = value; }
        }

        /// <summary>
        /// Specifies the latest time in the time range to search. The time string can be a UTC time (with fractional seconds), a relative time specifier (to now), or a formatted time string.
        /// </summary>
        public string LatestTime
        {
            set { this["latest_time"] = value; }
        }

        /// <summary>
        /// Sets the maximum number of lines that any single event's <b>_raw</b> field should contain.
        /// </summary>
        public int MaximumLines
        {
            set { this["max_lines"] = value; }
        }

        /// <summary>
        /// Specifies the index of the first result (inclusive) from which to begin returning data. This value is 0-indexed.
        /// <para>
        /// In Splunk 4.1+, negative offsets are allowed and are added to the count to compute the absolute offset (for example, offset=-1 is the last available offset). Offsets in the results are always absolute and never negative. The default value is 0.
        /// </para>
        /// </summary>
        public int Offset
        {
            set { this["offset"] = value; }
        }

        /// <summary>
        /// Sets the format of the output.
        /// </summary>
        public OutputModeEnum OutputMode
        {
            set { this["output_mode"] = value.GetCustomString(); }
        }

        /// <summary>
        /// Sets a UTC time format.
        /// </summary>
        public string OutputTimeFormat
        {
            set { this["output_time_format"] = value; }
        }

        /// <summary>
        /// Sets the post-processing search to apply to results.
        /// </summary>
        public string Search
        {
            set { this["search"] = value; }
        }

        /// <summary>
        /// Sets the type of segmentation to perform on the data, including an option to perform k/v segmentation.
        /// </summary>
        public string Segmentation
        {
            set { this["segmentation"] = value; }
        }

        /// <summary>
        /// Specifies an expression to convert a formatted time string from {start,end}_time into UTC seconds. The default format is "%m/%d/%Y:%H:%M:%S".
        /// </summary>
        public string TimeFormat
        {
            set { this["time_format"] = value; }
        }

        /// <summary>
        /// Specifies how to truncate lines to achieve the value in <see cref="MaximumLines"/>
        /// </summary>
        public TruncationModeEnum TruncationMode
        {
            set { this["truncation_mode"] = value.GetCustomString(); }
        }

        /* END AUTOGENERATED CODE */
    }
}